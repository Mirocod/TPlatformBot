# -*- coding: utf8 -*-
# –û–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –¥–æ—Å—Ç–æ—è–Ω–∏–µ 2023, –ê–ª–µ–∫—Å–µ–π –ë–µ–∑–±–æ—Ä–æ–¥–æ–≤ (Alexei Bezborodov) <AlexeiBv+mirocod_platform_bot@narod.ru> 

# –ì—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

from bot_sys import bot_bd, log, config, keyboard, user_access
from bot_modules import start, access
from aiogram import Bot, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

import sqlite3

from aiogram.dispatcher import Dispatcher

bot = Bot(token=config.GetTelegramBotApiToken(), parse_mode=types.ParseMode.HTML)

class FSMRequestToBD(StatesGroup):
    sqlRequest = State()

# ---------------------------------------------------------
# –ë–î
module_name = 'groups'

init_bd_cmds = ["""CREATE TABLE IF NOT EXISTS user_groups(
    group_id INTEGER PRIMARY KEY NOT NULL,
    groupName TEXT,
    UNIQUE(group_id)
);""",
"""CREATE TABLE IF NOT EXISTS user_in_groups(
    user_id INTEGER,
    group_id INTEGER,
    UNIQUE(user_id, group_id)
);""",
f"INSERT OR IGNORE INTO module_access (modName, modAccess) VALUES ('{module_name}', 'other=-');"
]

# ---------------------------------------------------------
# –°–æ–æ–±—â–µ–Ω–∏—è

group_start_message = '''
<b>–ì—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏</b>

–ü–æ–∫–∞ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ö–∞—Ä–¥–∫–æ—Ä–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º —á–µ—Ä–µ–∑ –∑–∞–ø—Ä–æ—Å—ã –∫ –ë–î
'''

request_start_message = '''
**–ó–∞–¥–∞–π—Ç–µ –∑–∞–ø—Ä–æ—Å –∫ –ë–î**

–ú–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–ª–µ–¥—É—é—â–∏–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏:
1. `SELECT * FROM users` - –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
2. `SELECT group_id, groupName FROM user_groups` - –í—Å–µ –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–ª–µ–π
3. `INSERT INTO user_groups(groupName) VALUES('GROUPNAME')` - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Å –∏–º–µ–Ω–µ–º GROUPNAME
4. `SELECT group_id FROM user_in_groups WHERE user_id = USERID`- –í—Å–µ ID –≥—Ä—É–ø–ø –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ—Å—Ç–æ–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å USERID
5. `SELECT groupName FROM user_groups WHERE group_id=(SELECT groupid FROM user_in_groups WHERE user_id = USERID)` - –í—Å–µ –∏–º–µ–Ω–∞ –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å USERID
6. `INSERT INTO user_in_groups(user_id, group_id) VALUES(USERID, GROUPID)` - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è USERID –≤ –≥—Ä—É–ø–ø—É —Å GROUPID
'''

help_message = '''
üìÑ –°—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–≤–µ –ë–î –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥—Ä—É–ø–ø–∞–º–∏
`user_groups (group_id, groupName)` - —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø
`user_in_groups(user_id, group_id)` - —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å–≤–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≥—Ä—É–ø–ø
 '''

request_cancel_message = '''
–ó–∞–ø—Ä–æ—Å –∫ –ë–î –æ—Ç–º–µ–Ω—ë–Ω
'''

user_group_button_name = "‚ÄçÔ∏èÔ∏è‚ñ¶ –ì—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
sql_request_button_name = "‚õÉ –ó–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø"
help_button_name = "üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≥—Ä—É–ø–ø–∞–º"
can—Åel_button_name = "üö´ –û—Ç–º–µ–Ω–∏—Ç—å"

# ---------------------------------------------------------
# –†–∞–±–æ—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏

def GetEditGroupKeyboardButtons(a_UserGroups):
    cur_buttons = [
        keyboard.ButtonWithAccess(sql_request_button_name, user_access.AccessMode.EDIT, GetAccess()), 
        keyboard.ButtonWithAccess(help_button_name, user_access.AccessMode.VIEW, GetAccess())
    ]
    mods = [start]
    return keyboard.MakeKeyboard(keyboard.GetButtons(mods) + cur_buttons, a_UserGroups)

def GetCancelKeyboardButtons(a_UserGroups, a_AccessFunc):
    cur_buttons = [
        keyboard.ButtonWithAccess(can—Åel_button_name, user_access.AccessMode.VIEW, a_AccessFunc())
    ]
    return keyboard.MakeKeyboard(cur_buttons, a_UserGroups)

# ---------------------------------------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
async def GroupStart(a_Message):
    user_id = str(a_Message.from_user.id)
    user_groups = GetUserGroupData(user_id)
    if not user_access.CheckAccessString(GetAccess(), user_groups, user_access.AccessMode.VIEW):
        return await bot.send_message(user_id, access.access_denied_message, reply_markup = GetEditGroupKeyboardButtons(user_groups))

    await bot.send_message(user_id, group_start_message, reply_markup = GetEditGroupKeyboardButtons(user_groups))

def RequestToBDCancelTemplate(a_GetButtonsFunc, a_AccessFunc):
    async def RequestToBDCancel(a_Message : types.message, state : FSMContext):
        user_id = str(a_Message.from_user.id)
        user_groups = GetUserGroupData(user_id)
        if not user_access.CheckAccessString(a_AccessFunc(), user_groups, user_access.AccessMode.VIEW):
            return await bot.send_message(user_id, access.access_denied_message, reply_markup = a_GetButtonsFunc(user_groups))
        await state.finish()
        await a_Message.answer(request_cancel_message, reply_markup = a_GetButtonsFunc(user_groups))
    return RequestToBDCancel

def HelpTemplate(a_HelpMessage, a_GetButtonsFunc, a_AccessFunc):
    async def Help(a_Message : types.message):
        user_id = str(a_Message.from_user.id)
        user_groups = GetUserGroupData(user_id)
        if not user_access.CheckAccessString(a_AccessFunc(), user_groups, user_access.AccessMode.VIEW):
            return await bot.send_message(user_id, access.access_denied_message, reply_markup = a_GetButtonsFunc(user_groups))
        await a_Message.answer(a_HelpMessage, reply_markup = a_GetButtonsFunc(user_groups)) #, parse_mode='Markdown')
    return Help

def RequestToBDTemplate(a_StartMessage, a_AccessFunc, a_FSM):
    async def RequestToBDStart(a_Message : types.message):
        user_id = str(a_Message.from_user.id)
        user_groups = GetUserGroupData(user_id)
        if not user_access.CheckAccessString(a_AccessFunc(), user_groups, user_access.AccessMode.EDIT):
            return await bot.send_message(user_id, access.access_denied_message, reply_markup = GetCancelKeyboardButtons(user_groups, a_AccessFunc))
        await a_FSM.sqlRequest.set()
        await a_Message.answer(a_StartMessage, reply_markup = GetCancelKeyboardButtons(user_groups, a_AccessFunc), parse_mode='Markdown')
    return RequestToBDStart

def RequestToBDFinishTemplate(a_GetButtonsFunc, a_AccessFunc):
    async def RequestToBDFinish(a_Message : types.message, state : FSMContext):
        user_id = str(a_Message.from_user.id)
        user_groups = GetUserGroupData(user_id)
        if not user_access.CheckAccessString(a_AccessFunc(), user_groups, user_access.AccessMode.EDIT):
            return await bot.send_message(user_id, access.access_denied_message, reply_markup = GetEditGroupKeyboardButtons(user_groups))
        result = ''
        async with state.proxy() as prjData:
            sql_request = a_Message.text
            log.Success(f'–°–¥–µ–ª–∞–Ω –∑–∞–ø—Ä–æ—Å [{sql_request}] –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {a_Message.from_user.id}.')
            result = bot_bd.SQLRequestToBDCommit(sql_request)
            log.Success(f'–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ [{sql_request}] –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {a_Message.from_user.id} —Å–ª–µ–¥—É—é—â–∏–π [{result}].')
        await state.finish()
        await a_Message.answer(str(result), reply_markup = a_GetButtonsFunc(user_groups))
    return RequestToBDFinish

# ---------------------------------------------------------
# –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø

def GetGroupIDForUser(a_UserID):
    return bot_bd.SQLRequestToBD1('SELECT group_id FROM user_in_groups WHERE user_id = ?', [a_UserID])

def GetGroupNamesForUser(a_UserID):
    return bot_bd.SQLRequestToBD1('SELECT groupName FROM user_groups WHERE group_id=(SELECT group_id FROM user_in_groups WHERE user_id = ?)', [a_UserID])

def GetUserGroupData(a_UserID):
    r = GetGroupNamesForUser(a_UserID)
    groups = []
    for i in r:
        groups += [i[0]]
    return user_access.UserGroups(a_UserID, groups)

# ---------------------------------------------------------
# API

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def GetInitBDCommands():
    return init_bd_cmds

def GetAccess():
    return access.GetAccessForModule(module_name)

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
def GetModuleButtons():
    return [keyboard.ButtonWithAccess(user_group_button_name, user_access.AccessMode.VIEW, GetAccess())]

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
def RegisterHandlers(dp : Dispatcher):
    dp.register_message_handler(GroupStart, text = user_group_button_name)
    dp.register_message_handler(HelpTemplate(help_message, GetEditGroupKeyboardButtons, GetAccess), text = help_button_name)

    dp.register_message_handler(RequestToBDTemplate(request_start_message, GetAccess, FSMRequestToBD), text = sql_request_button_name)
    dp.register_message_handler(RequestToBDCancelTemplate(GetEditGroupKeyboardButtons, GetAccess), text = can—Åel_button_name, state = FSMRequestToBD.sqlRequest)
    dp.register_message_handler(RequestToBDFinishTemplate(GetEditGroupKeyboardButtons, GetAccess), state = FSMRequestToBD.sqlRequest)
