# -*- coding: utf8 -*-
# –û–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –¥–æ—Å—Ç–æ—è–Ω–∏–µ 2023, –ê–ª–µ–∫—Å–µ–π –ë–µ–∑–±–æ—Ä–æ–¥–æ–≤ (Alexei Bezborodov) <AlexeiBv+mirocod_platform_bot@narod.ru> 

# –ü—Ä–æ–µ–∫—Ç—ã

from bot_sys import bot_bd, log, config, keyboard
from bot_modules import start
from aiogram import Bot, types

import sqlite3

from aiogram.dispatcher import Dispatcher

bot = Bot(token=config.GetTelegramBotApiToken(), parse_mode=types.ParseMode.HTML)

# ---------------------------------------------------------
# –ë–î
init_bd_cmd = '''CREATE TABLE IF NOT EXISTS projects(
    projectPhoto TEXT,
    projectName TEXT,
    projectDesc TEXT,
    parentID INTEGER,
    projectID INTEGER PRIMARY KEY
)'''

# ---------------------------------------------------------
# –°–æ–æ–±—â–µ–Ω–∏—è

select_project_message = '''
<b>üõí –ü—Ä–æ–µ–∫—Ç—ã</b>

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:
'''

error_find_proj_message = '''
–û—à–∏–±–∫–∞, –ø—Ä–æ–µ–∫—Ç —Å ID @project_id –Ω–µ –Ω–∞–π–¥–µ–Ω
'''

project_open_message = '''
<b>–ü—Ä–æ–µ–∫—Ç:  @proj_name</b>

@proj_desk
'''

projects_button_name = "üì∞ –ü—Ä–æ–µ–∫—Ç—ã"

# –ü—Ä–µ—Ñ–∏–∫—Å—ã
select_project_callback_prefix = 'project:'

# ---------------------------------------------------------
# –†–∞–±–æ—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏

def GetStartKeyboardButtons(a_UserAccess):
    mods = [start]
    return keyboard.MakeKeyboardForMods(mods, a_UserAccess)

# ---------------------------------------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –±–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª—è
async def ProjectsOpen(a_Message):
    projects = GetProjectList(0)
    projects_button_list = []
    for t in projects:
        b = keyboard.Button(str(t[1]), t[4])
    await bot.send_message(a_Message.from_user.id, select_project_message, reply_markup=keyboard.MakeInlineKeyboard(projects_button_list, select_project_callback_prefix))

async def ShowProject(a_CallbackQuery : types.CallbackQuery):
    project_id = str(a_CallbackQuery.data).replace(select_project_callback_prefix, '')
    project = GetProject(project_id)
    if len(project) != 1:
        log.Error(f'–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω {project_id}')
        msg = –û—à–∏–±–∫–∞.replace('@project_id', project_id)
        await bot.send_message(a_CallbackQuery.from_user.id, msg, reply_markup=keyboard.MakeKeyboardForMods([start]))
        return

    p = project[0]
    msg = project_open_message.replace('@proj_name', p[1]).replace('@proj_desk', p[2])
    await bot.send_photo(a_CallbackQuery.from_user.id, p[0], msg, reply_markup=keyboard.MakeKeyboardForMods([start]))

# ---------------------------------------------------------
# –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

def GetProjectList(a_ParentID):
    db = sqlite3.connect(bot_bd.GetBDFileName())
    cursor = db.cursor()
    projects = cursor.execute('SELECT * FROM projects where parentID = ?', ([a_ParentID])).fetchall()
    cursor.close()
    db.close()
    return projects

def GetProject(a_ProjectID):
    db = sqlite3.connect(bot_bd.GetBDFileName())
    cursor = db.cursor()
    project = cursor.execute('SELECT * FROM categories WHERE catID = ?', ([catID])).fetchall()
    cursor.close()
    db.close()
    return project

# ---------------------------------------------------------
# API

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def GetInitBDCommands():
    return [init_bd_cmd]

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
def GetButtonNames(a_UserAccess):
    return [projects_button_name]

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
def RegisterHandlers(dp : Dispatcher):
    dp.register_message_handler(ProjectsOpen, text = projects_button_name)
    dp.register_callback_query_handler(ShowProject, lambda x: x.data.startswith(select_project_callback_prefix))
