# -*- coding: utf8 -*-
# –û–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –¥–æ—Å—Ç–æ—è–Ω–∏–µ, 2023, –ê–ª–µ–∫—Å–µ–π –ë–µ–∑–±–æ—Ä–æ–¥–æ–≤ (Alexei Bezborodov) <AlexeiBv+mirocod_platform_bot@narod.ru> 

# –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏

from bot_sys import bot_bd, log, keyboard, user_access
from bot_modules import start, access, groups, projects, tasks
from template import bd_item_view, simple_message, bd_item_delete, bd_item_edit, bd_item, bd_item_add, bd_item_select

from aiogram import types

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import Dispatcher
import sqlite3

class FSMCreateNeed(StatesGroup):
    name = State()
    desc = State()
    photo = State()
    
class FSMEditPhotoItem(StatesGroup):
    item_id = State()
    item_field = State()

class FSMEditNameItem(StatesGroup):
    item_id = State()
    item_field = State()

class FSMEditDeskItem(StatesGroup):
    item_id = State()
    item_field = State()

class FSMEditAccessItem(StatesGroup):
    item_id = State()
    item_field = State()
# ---------------------------------------------------------
# –ë–î
module_name = 'needs'

table_name = module_name
key_name = 'needID'
name_field = 'needName'
desc_field = 'needDesc'
photo_field = 'needPhoto'
access_field = 'needAccess'
create_datetime_field = 'needCreateDateTime'
parent_id_field = 'taskID'

init_bd_cmds = [f'''CREATE TABLE IF NOT EXISTS {table_name}(
    {key_name} INTEGER PRIMARY KEY,
    {name_field} TEXT,
    {desc_field} TEXT,
    {photo_field} TEXT,
    {access_field} TEXT,
    {create_datetime_field} TEXT,
    {parent_id_field} INTEGER
    )''',
f"INSERT OR IGNORE INTO module_access (modName, modAccess, itemDefaultAccess) VALUES ('{module_name}', '{user_access.user_access_group_new}=va', '{user_access.user_access_group_new}=va');"
]

# ---------------------------------------------------------
# –°–æ–æ–±—â–µ–Ω–∏—è

needs_button_name = "üëâ –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏"
base_need_message = f'''
<b>{needs_button_name}</b>

'''

list_need_button_name = "üìÉ –°–ø–∏—Å–æ–∫ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π"
select_need_message = '''
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å:
'''

error_find_proj_message = '''
‚ùå –û—à–∏–±–∫–∞, –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
'''

need_open_message = f'''
<b>–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å:  #{name_field}</b>

#{desc_field}

–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: #{create_datetime_field}
'''

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π

add_need_button_name = "‚òë –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å"
need_create_name_message = '''
–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏. –®–∞–≥ ‚Ññ1

–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏:
'''

need_create_desc_message = '''
–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏. –®–∞–≥ ‚Ññ2

–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏:
'''

need_create_photo_message = '''
–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏. –®–∞–≥ ‚Ññ3

–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±–ª–æ–∂–∫—É –¥–ª—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ (–§–æ—Ç–æ):
–û–Ω–∞ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –µ—ë –æ–ø–∏—Å–∞–Ω–∏–∏.
'''

need_success_create_message = '''‚úÖ –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!'''

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π.

edit_need_button_name = "üõ† –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å"
need_start_edit_message= '''
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
'''

need_select_to_edit_message = '''
–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.
'''

edit_need_photo_button_name = "‚òê –ò–∑–º–µ–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏"
need_edit_photo_message = '''
–ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤—É—é –æ–±–ª–æ–∂–∫—É –¥–ª—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ (–§–æ—Ç–æ):
–û–Ω–∞ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –µ—ë –æ–ø–∏—Å–∞–Ω–∏–∏.
'''

edit_need_name_button_name = "‚âÇ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —É –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏"
need_edit_name_message = f'''
–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏:
#{name_field}

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏:
'''

edit_need_desc_button_name = "ùå¥ –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —É –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏"
need_edit_desc_message = f'''
–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏:
#{desc_field}

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏:
'''

edit_need_access_button_name = "‚úã –ò–∑–º–µ–Ω–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏"
need_edit_access_message = f'''
–¢–µ–∫—É—â–∏–π –¥–æ—Å—Ç—É–ø –∫ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏:
#{access_field}

{user_access.user_access_readme}

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –¥–æ—Å—Ç—É–ø–∞:
'''

need_success_edit_message = '''‚úÖ –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞!'''

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π

del_need_button_name = "‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å"
need_select_to_delete_message = '''
–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.
–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —ç—Ç–æ–π –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ —Ç–∞–∫ –∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!
'''

need_success_delete_message = '''‚úÖ –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!'''

# ---------------------------------------------------------
# –†–∞–±–æ—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏

def GetEditNeedKeyboardButtons(a_Message, a_UserGroups):
    cur_buttons = GetModuleButtons() + [
        keyboard.ButtonWithAccess(edit_need_photo_button_name, user_access.AccessMode.EDIT, GetAccess()),
        keyboard.ButtonWithAccess(edit_need_name_button_name, user_access.AccessMode.EDIT, GetAccess()),
        keyboard.ButtonWithAccess(edit_need_desc_button_name, user_access.AccessMode.EDIT, GetAccess()),
        keyboard.ButtonWithAccess(edit_need_access_button_name, user_access.AccessMode.ACCEES_EDIT, GetAccess()),
        ]
    mods = [start]
    return keyboard.MakeKeyboard(keyboard.GetButtons(mods) + cur_buttons, a_UserGroups)

def GetStartNeedKeyboardButtons(a_Message, a_UserGroups):
    cur_buttons = [
        keyboard.ButtonWithAccess(list_need_button_name, user_access.AccessMode.VIEW, GetAccess()),
        keyboard.ButtonWithAccess(add_need_button_name, user_access.AccessMode.ADD, GetAccess()),
        keyboard.ButtonWithAccess(del_need_button_name, user_access.AccessMode.DELETE, GetAccess()),
        keyboard.ButtonWithAccess(edit_need_button_name, user_access.AccessMode.EDIT, GetAccess())
        ]
    mods = [start]
    return keyboard.MakeKeyboard(keyboard.GetButtons(mods) + cur_buttons, a_UserGroups)

# ---------------------------------------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π

# —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def NeedsOpen(a_Message : types.message, state = None):
    return simple_message.WorkFuncResult(base_need_message)

def GetButtonNameAndKeyValueAndAccess(a_Item):
    # needName needID needAccess
    return a_Item[1], a_Item[0], a_Item[4]

def ShowMessageTemplate(a_StringMessage):
    async def ShowMessage(a_CallbackQuery : types.CallbackQuery, a_Item):
        if (len(a_Item) < 6):
            return simple_message.WorkFuncResult(error_find_proj_message)

        msg = a_StringMessage.\
                replace(f'#{name_field}', a_Item[1]).\
                replace(f'#{desc_field}', a_Item[2]).\
                replace(f'#{create_datetime_field}', a_Item[5]).\
                replace(f'#{access_field}', a_Item[4])
        return simple_message.WorkFuncResult(msg, photo_id = a_Item[3], item_access = a_Item[4])
    return ShowMessage

def SimpleMessageTemplate(a_StringMessage):
    async def ShowMessage(a_CallbackQuery : types.CallbackQuery, a_Item):
        return simple_message.WorkFuncResult(a_StringMessage)
    return ShowMessage

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π 

async def NeedPreDelete(a_CallbackQuery : types.CallbackQuery, a_Item):
    if (len(a_Item) < 6):
        return simple_message.WorkFuncResult(error_find_proj_message)
    access = a_Item[4]
    return simple_message.WorkFuncResult('', None, item_access = access)

async def NeedPostDelete(a_CallbackQuery : types.CallbackQuery, a_ItemID):
    log.Success(f'–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å ‚Ññ{a_ItemID} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {a_CallbackQuery.from_user.id}.')
    #TODO: —É–¥–∞–ª–∏—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ 
    return simple_message.WorkFuncResult(need_success_delete_message)

# ---------------------------------------------------------
# –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π

def AddBDItemFunc(a_ItemData, a_UserID):
    print(a_ItemData)
    res, error = bot_bd.SQLRequestToBD(f'INSERT INTO {table_name}({photo_field}, {name_field}, {desc_field}, {access_field}, {parent_id_field}, {create_datetime_field}) VALUES(?, ?, ?, ?, ?, {bot_bd.GetBDDateTimeNow()})', 
            commit = True, return_error = True, param = (a_ItemData[photo_field], a_ItemData[name_field], a_ItemData[desc_field], access.GetItemDefaultAccessForModule(module_name) + f";{a_UserID}=+", a_ItemData[parent_id_field]))

    if error:
        log.Error(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–ª–µ–ª—å {a_UserID}. –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É {table_name} ({a_ItemData[photo_field]}, {a_ItemData[name_field]}, {a_ItemData[desc_field]}, {access.GetItemDefaultAccessForModule(module_name)}).')
    else:
        log.Success(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–ª–µ–ª—å {a_UserID}. –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É {table_name} ({a_ItemData[photo_field]}, {a_ItemData[name_field]}, {a_ItemData[desc_field]}, {access.GetItemDefaultAccessForModule(module_name)}).')

    return res, error

# ---------------------------------------------------------
# API

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def GetInitBDCommands():
    return init_bd_cmds

def GetAccess():
    return access.GetAccessForModule(module_name)

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
def GetModuleButtons():
    return [keyboard.ButtonWithAccess(needs_button_name, user_access.AccessMode.VIEW, GetAccess())]

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
def RegisterHandlers(dp : Dispatcher):
    defaul_keyboard_func = GetStartNeedKeyboardButtons
    def RegisterSelectParent(a_ButtonName, access_mode):
        a_PrefixBase = a_ButtonName
        a_Prefix =  bd_item_select.FirstSelectBDItemRegisterHandlers(dp, \
                a_PrefixBase, \
                a_ButtonName, \
                projects.table_name, \
                projects.key_name, \
                projects.GetButtonNameAndKeyValueAndAccess, \
                projects.select_project_message, \
                projects.GetAccess, \
                access_mode = access_mode\
                )
        a_Prefix =  bd_item_select.NextSelectBDItemRegisterHandlers(dp, \
                a_Prefix, \
                tasks.parent_id_field, \
                tasks.table_name, \
                tasks.key_name, \
                tasks.GetButtonNameAndKeyValueAndAccess, \
                tasks.select_task_message, \
                tasks.GetAccess, \
                access_mode = access_mode\
                )
        return a_Prefix


    # –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    dp.register_message_handler(simple_message.SimpleMessageTemplate(NeedsOpen, defaul_keyboard_func, GetAccess), text = needs_button_name)

    # –°–ø–∏—Å–æ–∫ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π
    a_Prefix = RegisterSelectParent(list_need_button_name, user_access.AccessMode.VIEW)
    bd_item_view.LastSelectAndShowBDItemRegisterHandlers(dp, \
            a_Prefix, parent_id_field, \
            table_name, key_name, \
            ShowMessageTemplate(need_open_message), \
            GetButtonNameAndKeyValueAndAccess, \
            select_need_message, \
            GetAccess, \
            defaul_keyboard_func, \
            access_mode = user_access.AccessMode.VIEW\
            )

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π
    a_Prefix = RegisterSelectParent(del_need_button_name, user_access.AccessMode.DELETE)
    bd_item_delete.DeleteBDItemRegisterHandlers(dp, \
            a_Prefix, \
            bd_item.GetCheckForPrefixFunc(a_Prefix), \
            table_name, \
            key_name, \
            parent_id_field, \
            NeedPreDelete, \
            NeedPostDelete, \
            GetButtonNameAndKeyValueAndAccess, \
            select_need_message, \
            GetAccess, \
            defaul_keyboard_func\
            )

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π
    a_Prefix = RegisterSelectParent(add_need_button_name, user_access.AccessMode.ADD)
    bd_item_add.AddBDItem3RegisterHandlers(dp, \
            bd_item.GetCheckForPrefixFunc(a_Prefix), \
            FSMCreateNeed, \
            FSMCreateNeed.name,\
            FSMCreateNeed.desc, \
            FSMCreateNeed.photo,\
            AddBDItemFunc, \
            SimpleMessageTemplate(need_create_name_message), \
            SimpleMessageTemplate(need_create_desc_message), \
            SimpleMessageTemplate(need_create_photo_message), \
            SimpleMessageTemplate(need_success_create_message), \
            a_Prefix,\
            tasks.table_name, \
            tasks.key_name, \
            name_field, \
            desc_field, \
            photo_field, \
            GetButtonNameAndKeyValueAndAccess, \
            GetAccess, \
            GetStartNeedKeyboardButtons\
            )

    def RegisterEdit(a_ButtonName, a_FSM, a_EditMessage, a_FieldName, a_FieldType, a_AccessMode = user_access.AccessMode.EDIT):
        a_Prefix = RegisterSelectParent(a_ButtonName, a_AccessMode)
        bd_item_edit.EditBDItemRegisterHandlers(dp, \
                a_Prefix, \
                a_FSM, \
                bd_item.GetCheckForPrefixFunc(a_Prefix), \
                need_select_to_edit_message, \
                ShowMessageTemplate(a_EditMessage), \
                ShowMessageTemplate(need_success_edit_message), \
                table_name, \
                key_name, \
                parent_id_field, \
                a_FieldName, \
                GetButtonNameAndKeyValueAndAccess, \
                GetAccess, \
                edit_keyboard_func, \
                access_mode = a_AccessMode, \
                field_type = a_FieldType\
                )

    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π
    edit_keyboard_func = GetEditNeedKeyboardButtons
    dp.register_message_handler(simple_message.InfoMessageTemplate(need_start_edit_message, edit_keyboard_func, GetAccess, access_mode = user_access.AccessMode.EDIT), text = edit_need_button_name)

    RegisterEdit(edit_need_photo_button_name, FSMEditPhotoItem, need_edit_photo_message, photo_field, bd_item.FieldType.photo)
    RegisterEdit(edit_need_name_button_name, FSMEditNameItem, need_edit_name_message, name_field, bd_item.FieldType.text)
    RegisterEdit(edit_need_desc_button_name, FSMEditDeskItem, need_edit_desc_message, desc_field, bd_item.FieldType.text)
    RegisterEdit(edit_need_access_button_name, FSMEditAccessItem, need_edit_access_message, access_field, bd_item.FieldType.text)
