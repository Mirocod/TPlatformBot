# -*- coding: utf8 -*-
# –û–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –¥–æ—Å—Ç–æ—è–Ω–∏–µ, 2023, –ê–ª–µ–∫—Å–µ–π –ë–µ–∑–±–æ—Ä–æ–¥–æ–≤ (Alexei Bezborodov) <AlexeiBv+mirocod_platform_bot@narod.ru> 

# –ü—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

from bot_sys import bot_bd, log, config, keyboard, user_access
from bot_modules import start, groups
from template import simple_message, sql_request, bd_item_edit, bd_item

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import Dispatcher
from aiogram import types

class FSMRequestToBDAccess(StatesGroup):
    sqlRequest = State()


class FSMEditAccessItem(StatesGroup):
    item_field = State()


class FSMEditDefaultAccessItem(StatesGroup):
    item_field = State()
# ---------------------------------------------------------
# –ë–î
module_name = 'access'

table_name = 'module_access'
mod_name_field = 'modName'
moduleaccess_field = 'modAccess'
mod_default_access_field = 'itemDefaultAccess'

#TODO: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ init_bd_cmds, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ table_name, mod_name_field ... –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –≤ –æ–±—ä–µ–∫—Ç

init_bd_cmds = [f"""CREATE TABLE IF NOT EXISTS {table_name}(
    {mod_name_field} TEXT,
    {moduleaccess_field} TEXT,
    {mod_default_access_field} TEXT,
    UNIQUE({mod_name_field})
);""",
f"INSERT OR IGNORE INTO {table_name} ({mod_name_field}, {moduleaccess_field}, {mod_default_access_field}) VALUES ('{module_name}', '{user_access.user_access_group_new}=-', '{user_access.user_access_group_new}=-');"
]

# ---------------------------------------------------------
# –°–æ–æ–±—â–µ–Ω–∏—è

access_start_message = '''
<b> –ü—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏</b>

–ü–æ–∫–∞ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ö–∞—Ä–¥–∫–æ—Ä–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º —á–µ—Ä–µ–∑ –∑–∞–ø—Ä–æ—Å—ã –∫ –ë–î
'''

request_start_message = '''
**–ó–∞–¥–∞–π—Ç–µ –∑–∞–ø—Ä–æ—Å –∫ –ë–î**

–ú–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–ª–µ–¥—É—é—â–∏–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏:
1. `SELECT * FROM users` - –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
2. `SELECT * FROM module_access` - –í—Å–µ –ø—Ä–∞–≤–∞ –∫ –º–æ–¥—É–ª—è–º
3. `UPDATE module_access SET modAccess = 'NEWACCESS' WHERE modName = 'MODNAME'` - –ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∞ NEWACCESS –¥–ª—è –º–æ–¥—É–ª—è MODNAME
'''

help_message = '''
üìÑ –°—É—â–µ—Å—Ç–≤—É–µ—Ç –æ–¥–Ω–∞ –ë–î –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∞–≤–∞–º–∏ –¥–ª—è –º–æ–¥—É–ª–µ–π
–ò–º—è –ë–î: module_access 
–ü–æ–ª—è:(modName, modAccess)

modAccess - —Å—Ç—Ä–æ–∫–∞
''' + user_access.user_access_readme

access_denied_message = '''
‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!
''' 

access_button_name = "‚õÄ –î–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
sql_request_button_name = "‚õÅ –ó–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞"
help_button_name = "üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –¥–æ—Å—Ç—É–ø–∞"

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞.

moduleaccess_select_to_edit_message = '''
–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.
'''

edit_moduleaccess_access_button_name = "‚óá –ò–∑–º–µ–Ω–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥—É–ª—é"
moduleaccess_edit_access_message = f'''
–¢–µ–∫—É—â–∏–π –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥—É–ª—é #{mod_name_field}:
#{moduleaccess_field}

{user_access.user_access_readme}

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –¥–æ—Å—Ç—É–ø–∞:
'''

edit_moduleaccess_default_access_button_name = "‚óà –ò–∑–º–µ–Ω–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫ –º–æ–¥—É–ª—é "
moduleaccess_edit_default_access_message = f'''
–¢–µ–∫—É—â–∏–π –¥–æ—Å—Ç—É–ø –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫ –º–æ–¥—É–ª—é #{mod_name_field}:
#{mod_default_access_field}

{user_access.user_access_readme}

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –¥–æ—Å—Ç—É–ø–∞:
'''

moduleaccess_success_edit_message = '''‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω!'''

# ---------------------------------------------------------
# –†–∞–±–æ—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏

def GetEditAccessKeyboardButtons(a_Message, a_UserGroups):
    cur_buttons = [
        keyboard.ButtonWithAccess(sql_request_button_name, user_access.AccessMode.ACCEES_EDIT, GetAccess()),
        keyboard.ButtonWithAccess(edit_moduleaccess_access_button_name, user_access.AccessMode.ACCEES_EDIT, GetAccess()),
        keyboard.ButtonWithAccess(edit_moduleaccess_default_access_button_name, user_access.AccessMode.ACCEES_EDIT, GetAccess()),
        keyboard.ButtonWithAccess(help_button_name, user_access.AccessMode.VIEW, GetAccess())
    ]
    mods = [start]
    return keyboard.MakeKeyboard(keyboard.GetButtons(mods) + cur_buttons, a_UserGroups)

# ---------------------------------------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π

def GetButtonNameAndKeyValueAndAccess(a_Item):
    # ButtonName KeyValue Access
    return a_Item[0], a_Item[0], a_Item[1]

def ShowMessageTemplate(a_StringMessage):
    async def ShowMessage(a_CallbackQuery : types.CallbackQuery, a_Item):
        if (len(a_Item) < 3):
            return simple_message.WorkFuncResult(error_find_proj_message)

        msg = a_StringMessage.\
                replace(f'#{mod_name_field}', a_Item[0]).\
                replace(f'#{moduleaccess_field}', a_Item[1]).\
                replace(f'#{mod_default_access_field}', a_Item[2])
        return simple_message.WorkFuncResult(msg, item_access = a_Item[1])
    return ShowMessage

def SimpleMessageTemplateLegacy(a_StringMessage):
    async def ShowMessage(a_CallbackQuery : types.CallbackQuery):
        return simple_message.WorkFuncResult(a_StringMessage)
    return ShowMessage

# ---------------------------------------------------------
# –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö 

def GetModuleAccessList():
    return bot_bd.SelectBDTemplate(table_name)()

# ---------------------------------------------------------
# API

def GetAccessForModule(a_ModuleName):
    alist = GetModuleAccessList()
    for i in alist:
        if i[0] == a_ModuleName:
            return i[1]
    return ''

def GetItemDefaultAccessForModule(a_ModuleName):
    alist = GetModuleAccessList()
    for i in alist:
        if i[0] == a_ModuleName:
            return i[2]
    return ''

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def GetInitBDCommands():
    return init_bd_cmds

def GetAccess():
    return GetAccessForModule(module_name)

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
def GetModuleButtons():
    return [keyboard.ButtonWithAccess(access_button_name, user_access.AccessMode.VIEW, GetAccess())]

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
def RegisterHandlers(dp : Dispatcher):
    defaul_keyboard_func = GetEditAccessKeyboardButtons
    dp.register_message_handler(simple_message.InfoMessageTemplateLegacy(access_start_message, defaul_keyboard_func, GetAccess), text = access_button_name)
    dp.register_message_handler(simple_message.InfoMessageTemplateLegacy(help_message, defaul_keyboard_func, GetAccess), text = help_button_name)

    sql_request.RequestToBDRegisterHandlers(dp, sql_request_button_name, request_start_message, FSMRequestToBDAccess, defaul_keyboard_func, user_access.AccessMode.ACCEES_EDIT, GetAccess)

    edit_keyboard_func = defaul_keyboard_func
    def RegisterEdit(a_ButtonName, a_FSM, a_EditMessage, a_FieldName, a_FieldType, a_AccessMode = user_access.AccessMode.ACCEES_EDIT):
        bd_item_edit.EditBDItemRegisterHandlers(dp, \
                None, \
                a_FSM, \
                bd_item.GetCheckForTextFunc(a_ButtonName), \
                moduleaccess_select_to_edit_message, \
                ShowMessageTemplate(a_EditMessage), \
                ShowMessageTemplate(moduleaccess_success_edit_message), \
                table_name, \
                mod_name_field, \
                None, \
                a_FieldName, \
                GetButtonNameAndKeyValueAndAccess, \
                GetAccess, \
                edit_keyboard_func, \
                access_mode = a_AccessMode, \
                field_type = a_FieldType\
                )
    RegisterEdit(edit_moduleaccess_access_button_name, FSMEditAccessItem, moduleaccess_edit_access_message, moduleaccess_field, bd_item.FieldType.text, user_access.AccessMode.ACCEES_EDIT)
    RegisterEdit(edit_moduleaccess_default_access_button_name, FSMEditDefaultAccessItem, moduleaccess_edit_default_access_message, mod_default_access_field, bd_item.FieldType.text, user_access.AccessMode.EDIT)
