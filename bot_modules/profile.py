# -*- coding: utf8 -*-
# –û–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –¥–æ—Å—Ç–æ—è–Ω–∏–µ, 2023, –ê–ª–µ–∫—Å–µ–π –ë–µ–∑–±–æ—Ä–æ–¥–æ–≤ (Alexei Bezborodov) <AlexeiBv+mirocod_platform_bot@narod.ru> 

# –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

from bot_sys import user_access, bot_bd, bd_table
from bot_modules import mod_simple_message, access, access_utils, groups_utils, users
from template import bd_item, simple_message

# ---------------------------------------------------------
# –ë–î
module_name = 'profile'

button_names = {
    mod_simple_message.ButtonNames.START: "üì∞ –ü—Ä–æ—Ñ–∏–ª—å",
}

messages = {
    mod_simple_message.Messages.START: f'''
<b>üì∞ –ü—Ä–æ—Ñ–∏–ª—å:</b> 

<b>ID:</b> #{users.key_name}
<b>–ò–º—è:</b> #{users.name_field}
<b>–ò–º—è1:</b> #{users.name1_field}
<b>–ò–º—è2:</b> #{users.name2_field}
<b>–ö–æ–¥ —è–∑—ã–∫–∞:</b> #{users.language_code_field}
<b>–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:</b> #{users.create_datetime_field}
''',
}

init_access = f'{user_access.user_access_group_new}=+'

class ModuleProfile(mod_simple_message.SimpleMessageModule):
    def __init__(self, a_ChildModuleNameList, a_Bot, a_ModuleAgregator, a_BotMessages, a_BotButtons, a_Log):
        super().__init__(messages, button_names, init_access, a_ChildModuleNameList, a_Bot, a_ModuleAgregator, a_BotMessages, a_BotButtons, a_Log)

    def GetName(self):
        return module_name

    # –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    async def StartMessageHandler(self, a_Message, state = None):
        user_info = users.GetUserInfo(self.m_Bot, a_Message.from_user.id)
        lang = str(a_Message.from_user.language_code)
        if not user_info is None:
            msg = self.GetMessage(mod_simple_message.Messages.START)
            msg = msg.GetMessageForLang(lang).StaticCopy()
            msg.UpdateDesc(users.table.ReplaceAllFieldTags(msg.GetDesc(), user_info))
            return simple_message.WorkFuncResult(msg, item_access = str(user_info[users.table.GetFieldIDByDestiny(bd_table.TableFieldDestiny.ACCESS)]))
        return await super().StartMessageHandler(a_Message, state)


